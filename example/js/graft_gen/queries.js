// Code generated by Graft. DO NOT EDIT.

class Queries {
  constructor(db) {
    this.db = db;
    this._stmts = new Map();
  }

  /**
   * @param {number} id
   * @returns {Promise<boolean|null>}
   */
  async isadminUser(id) {
    let stmt = this._stmts.get('isadminUser');
    if (!stmt) {
      stmt = { name: 'isadminUser', text: `SELECT isadmin FROM users WHERE id = $1 LIMIT 1;` };
      this._stmts.set('isadminUser', stmt);
    }
    stmt.values = [id];
    const r = await this.db.query(stmt);
    return r.rows[0] ? r.rows[0].isadmin : null;
  }

  /**
   * @param {number} id
   * @returns {Promise<string|null>}
   */
  async getUserEmail(id) {
    let stmt = this._stmts.get('getUserEmail');
    if (!stmt) {
      stmt = { name: 'getUserEmail', text: `SELECT email FROM users WHERE id = $1 LIMIT 1;` };
      this._stmts.set('getUserEmail', stmt);
    }
    stmt.values = [id];
    const r = await this.db.query(stmt);
    return r.rows[0] ? r.rows[0].email : null;
  }

  /**
   * COMPLEX QUERIES (Ultra-Optimized with CTEs and Subqueries)
   * @param {number} id
   * @returns {Promise<string|null>}
   */
  async getUserName(id) {
    let stmt = this._stmts.get('getUserName');
    if (!stmt) {
      stmt = { name: 'getUserName', text: `SELECT name FROM users WHERE id = $1 LIMIT 1;` };
      this._stmts.set('getUserName', stmt);
    }
    stmt.values = [id];
    const r = await this.db.query(stmt);
    return r.rows[0] ? r.rows[0].name : null;
  }

  /**
   * ULTRA-OPTIMIZED: Using CTE for better query planning and caching
   * @returns {Promise<Object[]>}
   */
  async getActiveUsersWithStats() {
    let stmt = this._stmts.get('getActiveUsersWithStats');
    if (!stmt) {
      stmt = { name: 'getActiveUsersWithStats', text: `WITH post_stats AS ( SELECT user_id, COUNT(*) as total_posts, MAX(created_at) as last_post_date FROM posts GROUP BY user_id ), comment_stats AS ( SELECT user_id, COUNT(*) as total_comments FROM comments GROUP BY user_id ) SELECT u.id, u.name, u.email, u.isadmin, ps.total_posts, COALESCE(cs.total_comments, 0) as total_comments, ps.last_post_date FROM users u INNER JOIN post_stats ps ON u.id = ps.user_id LEFT JOIN comment_stats cs ON u.id = cs.user_id ORDER BY ps.total_posts DESC;` };
      this._stmts.set('getActiveUsersWithStats', stmt);
    }
    const r = await this.db.query(stmt);
    return r.rowCount;
  }

  /**
   * INSERT OPERATIONS
   * @returns {Promise<Object[]>}
   */
  async getTopActiveUsers() {
    let stmt = this._stmts.get('getTopActiveUsers');
    if (!stmt) {
      stmt = { name: 'getTopActiveUsers', text: `WITH ranked_users AS ( SELECT user_id, COUNT(*) as total_posts FROM posts GROUP BY user_id ORDER BY total_posts DESC LIMIT 10 ) SELECT u.id, u.name, u.email, ru.total_posts, COALESCE(cs.total_comments, 0) as total_comments FROM ranked_users ru INNER JOIN users u ON u.id = ru.user_id LEFT JOIN ( SELECT user_id, COUNT(*) as total_comments FROM comments WHERE user_id IN (SELECT user_id FROM ranked_users) GROUP BY user_id ) cs ON u.id = cs.user_id ORDER BY ru.total_posts DESC;` };
      this._stmts.set('getTopActiveUsers', stmt);
    }
    const r = await this.db.query(stmt);
    return r.rowCount;
  }

  /**
   * @param {string} name
   * @param {string} email
   * @param {string} address
   * @param {boolean} isadmin
   * @returns {Promise<number>}
   */
  async createUser(name, email, address, isadmin) {
    let stmt = this._stmts.get('createUser');
    if (!stmt) {
      stmt = `INSERT INTO users (name, email, address, isadmin) VALUES ($1, $2, $3, $4);`;
      this._stmts.set('createUser', stmt);
    }
    const r = await this.db.query(stmt, [name, email, address, isadmin]);
    return r.rowCount;
  }

  /**
   * @param {number} user_id
   * @param {number} category_id
   * @param {string} title
   * @param {string} content
   * @returns {Promise<number>}
   */
  async createPost(user_id, category_id, title, content) {
    let stmt = this._stmts.get('createPost');
    if (!stmt) {
      stmt = `INSERT INTO posts (user_id, category_id, title, content) VALUES ($1, $2, $3, $4);`;
      this._stmts.set('createPost', stmt);
    }
    const r = await this.db.query(stmt, [user_id, category_id, title, content]);
    return r.rowCount;
  }

  /**
   * @param {number} post_id
   * @param {number} user_id
   * @param {string} content
   * @returns {Promise<number>}
   */
  async createComment(post_id, user_id, content) {
    let stmt = this._stmts.get('createComment');
    if (!stmt) {
      stmt = `INSERT INTO comments (post_id, user_id, content) VALUES ($1, $2, $3);`;
      this._stmts.set('createComment', stmt);
    }
    const r = await this.db.query(stmt, [post_id, user_id, content]);
    return r.rowCount;
  }

  /**
   * @param {any} name
   * @returns {Promise<number>}
   */
  async createCategory(name) {
    let stmt = this._stmts.get('createCategory');
    if (!stmt) {
      stmt = `INSERT INTO categories (name) VALUES ($1); SELECT p.id, p.title, p.content, p.created_at, 'post' as activity_type FROM posts p WHERE p.user_id = $1 UNION ALL SELECT c.id, 'Comment' as title, c.content, c.created_at, 'comment' as activity_type FROM comments c WHERE c.user_id = $1 ORDER BY created_at DESC LIMIT 20;`;
      this._stmts.set('createCategory', stmt);
    }
    const r = await this.db.query(stmt, [name]);
    return r.rowCount;
  }

  /**
   * Calculate average posts per user (aggregate function)
   * @returns {Promise<number|null>}
   */
  async getAveragePostsPerUser() {
    let stmt = this._stmts.get('getAveragePostsPerUser');
    if (!stmt) {
      stmt = { name: 'getAveragePostsPerUser', text: `SELECT AVG(post_count) as avg_posts FROM ( SELECT COUNT(p.id) as post_count FROM users u LEFT JOIN posts p ON u.id = p.user_id GROUP BY u.id ) as user_posts;` };
      this._stmts.set('getAveragePostsPerUser', stmt);
    }
    stmt.values = [];
    const r = await this.db.query(stmt);
    return r.rows[0] ? r.rows[0].avg_posts : null;
  }

  /**
   * Get posts with most comments (subquery)
   * @param {any} param1
   * @returns {Promise<Object[]>}
   */
  async getMostCommentedPosts(param1) {
    let stmt = this._stmts.get('getMostCommentedPosts');
    if (!stmt) {
      stmt = `SELECT p.id, p.title, u.name as author, COUNT(c.id) as comment_count FROM posts p INNER JOIN users u ON p.user_id = u.id LEFT JOIN comments c ON p.id = c.post_id GROUP BY p.id, p.title, u.name ORDER BY comment_count DESC LIMIT $1;`;
      this._stmts.set('getMostCommentedPosts', stmt);
    }
    const r = await this.db.query(stmt, [param1]);
    return r.rows;
  }

  /**
   * Check if user exists by email (boolean result)
   * @param {string} email
   * @returns {Promise<boolean|null>}
   */
  async checkUserExists(email) {
    let stmt = this._stmts.get('checkUserExists');
    if (!stmt) {
      stmt = { name: 'checkUserExists', text: `SELECT EXISTS(SELECT 1 FROM users WHERE email = $1) as exists;` };
      this._stmts.set('checkUserExists', stmt);
    }
    stmt.values = [email];
    const r = await this.db.query(stmt);
    return r.rows[0] ? r.rows[0].exists : null;
  }

  /**
   * Get users created within a date range
   * @param {any} param1
   * @param {any} param2
   * @returns {Promise<Object[]>}
   */
  async getUsersCreatedBetween(param1, param2) {
    let stmt = this._stmts.get('getUsersCreatedBetween');
    if (!stmt) {
      stmt = `SELECT id, name, email, created_at FROM users WHERE created_at BETWEEN $1 AND $2 ORDER BY created_at DESC;`;
      this._stmts.set('getUsersCreatedBetween', stmt);
    }
    const r = await this.db.query(stmt, [param1, param2]);
    return r.rows;
  }

  /**
   * Update user admin status
   * @param {number} id
   * @param {boolean} isadmin
   * @returns {Promise<number>}
   */
  async updateUserAdminStatus(id, isadmin) {
    let stmt = this._stmts.get('updateUserAdminStatus');
    if (!stmt) {
      stmt = `UPDATE users SET isadmin = $2, updated_at = NOW() WHERE id = $1;`;
      this._stmts.set('updateUserAdminStatus', stmt);
    }
    const r = await this.db.query(stmt, [id, isadmin]);
    return r.rowCount;
  }

  /**
   * Delete users with no posts or comments
   * @param {any} param1
   * @returns {Promise<number>}
   */
  async deleteInactiveUsers(param1) {
    let stmt = this._stmts.get('deleteInactiveUsers');
    if (!stmt) {
      stmt = `DELETE FROM users WHERE id NOT IN ( SELECT DISTINCT user_id FROM posts UNION SELECT DISTINCT user_id FROM comments ) AND created_at < $1;`;
      this._stmts.set('deleteInactiveUsers', stmt);
    }
    const r = await this.db.query(stmt, [param1]);
    return r.rowCount;
  }

  /**
   * Insert a new user
   * @param {string} name
   * @param {string} email
   * @param {string} address
   * @param {boolean} isadmin
   * @returns {Promise<number>}
   */
  async createUser(name, email, address, isadmin) {
    let stmt = this._stmts.get('createUser');
    if (!stmt) {
      stmt = `INSERT INTO users (name, email, address, isadmin) VALUES ($1, $2, $3, $4);`;
      this._stmts.set('createUser', stmt);
    }
    const r = await this.db.query(stmt, [name, email, address, isadmin]);
    return r.rowCount;
  }

  /**
   * Insert a new post
   * @param {number} user_id
   * @param {number} category_id
   * @param {string} title
   * @param {string} content
   * @returns {Promise<number>}
   */
  async createPost(user_id, category_id, title, content) {
    let stmt = this._stmts.get('createPost');
    if (!stmt) {
      stmt = `INSERT INTO posts (user_id, category_id, title, content) VALUES ($1, $2, $3, $4);`;
      this._stmts.set('createPost', stmt);
    }
    const r = await this.db.query(stmt, [user_id, category_id, title, content]);
    return r.rowCount;
  }

  /**
   * Insert a new comment
   * @param {number} post_id
   * @param {number} user_id
   * @param {string} content
   * @returns {Promise<number>}
   */
  async createComment(post_id, user_id, content) {
    let stmt = this._stmts.get('createComment');
    if (!stmt) {
      stmt = `INSERT INTO comments (post_id, user_id, content) VALUES ($1, $2, $3);`;
      this._stmts.set('createComment', stmt);
    }
    const r = await this.db.query(stmt, [post_id, user_id, content]);
    return r.rowCount;
  }

  /**
   * Insert a new category
   * @param {string} name
   * @returns {Promise<number>}
   */
  async createCategory(name) {
    let stmt = this._stmts.get('createCategory');
    if (!stmt) {
      stmt = `INSERT INTO categories (name) VALUES ($1);`;
      this._stmts.set('createCategory', stmt);
    }
    const r = await this.db.query(stmt, [name]);
    return r.rowCount;
  }

  /**
   * Get all posts for a specific category
   * @param {any} param1
   * @returns {Promise<Object[]>}
   */
  async getPostsByCategory(param1) {
    let stmt = this._stmts.get('getPostsByCategory');
    if (!stmt) {
      stmt = `SELECT p.id, p.title, p.content, u.name as author_name, p.created_at FROM posts p INNER JOIN users u ON p.user_id = u.id WHERE p.category_id = $1 ORDER BY p.created_at DESC;`;
      this._stmts.set('getPostsByCategory', stmt);
    }
    const r = await this.db.query(stmt, [param1]);
    return r.rows;
  }

}

module.exports = { Queries };
